name: Continous Integration Workflow

on:
  workflow_call:
    inputs:
      CONFIGURATION:
        required: true
        type: string
      STAGING_NAME: 
        required: true
        type: string
      AZURE_FUNCTIONAPP_NAME:
        required: true
        type: string
      AZURE_FUNCTIONAPP_PATH:
        required: true
        type: string
      STATIC_WEB_APP_PATH:
        required: true
        type: string
      REACT_APP_ENVIRONMENT: 
        required: true
        type: string
      REACT_APP_API_ROOT: 
        required: true
        type: string
      REACT_APP_CDN_ROOT: 
        required: true
        type: string
    secrets:
      AZURE_FUNCTIONAPP_PUBLISH_PROFILE:
        required: true
      AZURE_STATIC_WEB_APPS_TOKEN:
        required: true
      CODECOV_TOKEN:
        required: true
      CHROMATIC_PROJECT_TOKEN:
        required: true
      NUGET_READ_TOKEN:
        required: true
      NPM_READ_TOKEN:
        required: true

concurrency: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}

jobs:
  build_and_deploy_job:
    timeout-minutes: 20
    if: github.event_name == 'push' || github.event_name == 'release' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@main

      - name: Setup .NET 3.1.x Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x

      - name: Setup .NET 6.0 Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Setup NODEJS 16.x Environment
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - name: .NET Restore
        run: |
          dotnet nuget add source --username nidoBM --password ${{ secrets.NUGET_READ_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/digitaldavidag/index.json"
          dotnet restore ./api

      - name: .NET Build
        run: dotnet build ./api --configuration ${{ inputs.CONFIGURATION }} --no-restore

      - name: .NET Test
        run: dotnet test ./api --no-build --configuration ${{ inputs.CONFIGURATION }} --collect:"XPlat Code Coverage"

      - name: Run Infer#
        uses: microsoft/infersharpaction@v1.2.1
        with:
          binary-path: './${{ inputs.AZURE_FUNCTIONAPP_PATH }}/bin/Release/net6.0'
      - name: Infer# analysis results
        run: echo "${{ steps.runinfersharp.outputs.results }}"

      - name: "Publish Azure Function"
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ inputs.AZURE_FUNCTIONAPP_NAME }}
          package: "./${{ inputs.AZURE_FUNCTIONAPP_PATH }}/bin/Release/net6.0"
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

      - name: Setup yarn
        run: |
          pushd ${{ inputs.STATIC_WEB_APP_PATH }}
          touch .yarnrc.yml
          echo nodeLinker: node-modules >> .yarnrc.yml
          echo yarnPath: .yarn/releases/yarn-3.2.0.cjs >> .yarnrc.yml
          echo npmScopes: >> .yarnrc.yml
          echo   digitaldavidag: >> .yarnrc.yml
          echo     npmAlwaysAuth: true >> .yarnrc.yml
          echo     npmAuthToken: ${{ secrets.NPM_READ_TOKEN }} >> .yarnrc.yml
          echo     npmPublishRegistry: "https://npm.pkg.github.com" >> .yarnrc.yml
          echo     npmRegistryServer: "https://npm.pkg.github.com" >> .yarnrc.yml
          popd

      - name: Run yarn
        run: |
          pushd ${{ inputs.STATIC_WEB_APP_PATH }}
          touch .yarnrc.yml
          echo nodeLinker: node-modules >> .yarnrc.yml
          echo yarnPath: .yarn/releases/yarn-3.2.0.cjs >> .yarnrc.yml
          echo npmScopes: >> .yarnrc.yml
          echo   digitaldavidag: >> .yarnrc.yml
          echo     npmAlwaysAuth: true >> .yarnrc.yml
          echo     npmAuthToken: ${{ secrets.NPM_READ_TOKEN }} >> .yarnrc.yml
          echo     npmPublishRegistry: "https://npm.pkg.github.com" >> .yarnrc.yml
          echo     npmRegistryServer: "https://npm.pkg.github.com" >> .yarnrc.yml
          cat ${{ inputs.STATIC_WEB_APP_PATH }}/.yarnrc.yml
          popd
      - name: Build storybook
        run: |
          pushd ${{ inputs.STATIC_WEB_APP_PATH }}
          yarn
          yarn run build-storybook
          popd

      - name: Deploy WebApp Release
        if: github.event_name == 'release'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}
          repo_token: ${{ github.token }}
          action: "upload"
          app_location: ${{ inputs.STATIC_WEB_APP_PATH }}
          api_location: ""
          output_location: "build"
          production_branch: "main"
          skip_api_build: true
      - name: Deploy WebApp Build
        if: github.event_name != 'release'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}
          repo_token: ${{ github.token }}
          action: "upload"
          app_location: ${{ inputs.STATIC_WEB_APP_PATH }}
          api_location: ""
          output_location: "build"
          deployment_environment: ${{ inputs.STAGING_NAME }}
          skip_api_build: true
      - run: |
          pushd ${{ inputs.STATIC_WEB_APP_PATH }}
          yarn run test
          popd
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          token: ${{ github.token }}
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          workingDir: ${{ inputs.STATIC_WEB_APP_PATH }}
          storybookBuildDir: "storybook-static"

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}
          action: "close"